---
'":init" Sub flag [eligible in 3.4]':
  eligible: 3.4
  note: 'At this point, ":init" is a no-op, and will therefore be removed.'
  tags:
    - PIR syntax
  ticket: https://trac.parrot.org/parrot/ticket/1896
'":load" and ":init" Sub flags doing different things [eligible in 3.1]':
  eligible: 3.1
  note: 'Currently, ":init" and ":load" flagged Subs get called depending on the way a PIR file has been loaded. This distinction is silly and will cease to be. The ":load" flag will be triggered both for scenarios. ":init" becomes a no-op for a deprecation cycle (see below).'
  tags:
    - PIR syntax
  ticket: https://trac.parrot.org/parrot/ticket/1895
':main Sub behaviour and selection. [eligible in 2.7]':
  eligible: 2.7
  note: 'Currently, if no :main sub is found, the first .sub in a file is used as main. Also, arguments are passed to the main sub regardless of the .param declarations in that sub. After this change, if no sub is marked with :main, an exception will be raised. Multiple :main declarations will be still be allowed, and all but the first will be ignored. This change will also force all subs, including :main, to have their arguments checked - to allow an arbitrary number of arguments, have this be the only .param declaration in the sub.'
  tags:
    - PIR syntax
  ticket: https://trac.parrot.org/parrot/ticket/1705
Action methods in rules:
  note: 'Per Synopsis 5, all regexes will have an implied {*} token at the end which cause invocation of an action method if a ":action" object is supplied.'
  tags:
    - compiler tools
  ticket: https://trac.parrot.org/parrot/ticket/843
'Archive::Tar & Archive::Zip [experimental]':
  tags:
    - Parrot library
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1598
'Assigning to registers [experimental]':
  tags:
    - debugger
    - experimental
'C API coding standards cleanup [eligible in 1.1]':
  eligible: 1.1
  note: "All C API functions that aren't currently named according to the 'Parrot_<system>_*' scheme will be renamed. A list of renamed functions will be kept in the ticket at:"
  tags:
    - functions
  ticket: https://trac.parrot.org/parrot/ticket/443
'Complex PMC [eligible in 3.1]':
  eligible: 3.1
  note: This perennially broken PMC will be removed.
  tags:
    - pmcs
  ticket: http://trac.parrot.org/parrot/ticket/1892
'Cross-HLL library loading [experimental]':
  tags:
    - Parrot library
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/754
'GC timely destruction [eligible in 3.1]':
  eligible: 3.1
  note: All PIR ops and internal semantics related to timely destruction of PMCs is deprecated.
  tags:
    - functions
  ticket: http://trac.parrot.org/parrot/ticket/1800
'GC_SYS_NAME option to interpinfo_s_i [experimental]':
  note: Ability to get the string name of the current GC core from the interpinfo_s_i. See r43900 and r43904 for details.
  tags:
    - Opcodes
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1581
'JSON and Config;JSON [eligible in 1.5]':
  eligible: 1.5
  tags:
    - Parrot library
  ticket: https://trac.parrot.org/parrot/ticket/508
'LWP, HTTP::Message, URI & URI::Escape [experimental]':
  tags:
    - Parrot library
    - experimental
  ticket: http://trac.parrot.org/parrot/ticket/1637
'ManagedStruct reallocations based on shape changes [eligible in 2.4]':
  eligible: 2.4
  note: 'Since shape changes may simply be used for re-interpreting data, and may also occur in several steps, re-allocating after any one shape change may be undesirable. In stead, an explicit allocate/reallocate method will be provided.'
  tags:
    - pmcs
  ticket: https://trac.parrot.org/parrot/ticket/1554
'MappedByteArray [experimental]':
  tags:
    - pmcs
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1877
'Meta-model implementation used by PCT [eligible in 2.7]':
  eligible: 2.7
  note: 'PCT is set to switch to a new meta-model implementation for its classes and objects. This will most likely only affect those who rely on the interface of what is returned from .HOW, or rely on PCT objects exhibiting various other peculiarities of the P6object implementation. (Even when that is the case, the HOW API will not be changing too drastically, so for most PCT users there should be little to no upheavel.)'
  tags:
    - compiler tools
'Method unescape on String [experimental]':
  note: This is a helper method for testing of Parrot_str_unescape_string.
  tags:
    - pmcs
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1628
'NCI_FB_CB and NCI_FB_UD in iglobals [experimental]':
  note: Hooks allowing a runtime-loadable dynamic frame builder.
  tags:
    - opcodes
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1582
'OpenGL bindings and libraries [experimental]':
  tags:
    - Parrot library
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/852
'Overriding vtable invoke in PIR objects [experimental]':
  note: The VTABLE invoke in object.pmc puts SELF at the start of the signature call arguments when there is no current object and is not already here. This allows the usage of $P0() instead of $P0($P0).
  tags:
    - pmcs
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/103
'PARROT_LIBRARY and PARROT_INCLUDE environment variables [experimental]':
  note: A way to provide an equivalent of -L and -I parrot command line options to language that doesn't support it.
  tags:
    - Parrot library
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1429
'PAST::Val node generation [eligible in 1.5]':
  eligible: 1.5
  note: 'The PAST::Compiler may generate the code for PAST::Val nodes (i.e., constants) at the beginning of the block (Parrot sub) instead of the location where they occur in the PAST tree.'
  tags:
    - compiler tools
  ticket: https://trac.parrot.org/parrot/ticket/868
"PCT::HLLCompiler from Perl 5's Test::Harness [eligible in 1.1]":
  eligible: 1.1
  note: "In order to facilitate using PCT::HLLCompiler with test harnesses, the \"command_line\" method of PCT::HLLCompiler object exits silently if it detects that it is being run in a sample run from Perl's Test::Harness. Currently this detection is done by checking the second command line argument for \"@INC\"; future releases may use a different detection mechanism or eliminate it altogether."
  tags:
    - compiler tools
  ticket: https://trac.parrot.org/parrot/ticket/463
'PMC numbering [experimental]':
  tags:
    - bytecode
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/451
'PackfileDebug [experimental]':
  tags:
    - pmcs
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1599
'Parrot_load_bytecode_file [experimental]':
  note: Load a .pbc file into the interpreter. Experimental.
  tags:
    - functions
    - experimental
'Parrot_str_unescape_string [experimental]':
  note: This function is an experimental addition to enhance and maybe replace Parrot_str_unescape
  tags:
    - functions
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1628
'Threads and Parallelism [experimental]':
  tags:
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1601
'UnManagedStruct get_integer, set_integer_native [eligible in 2.4]':
  eligible: 2.4
  note: 'These will no longer refer to the byte length of the buffer, but to the number of times the struct is repeated; emulating an array of structs.'
  tags:
    - pmcs
  ticket: https://trac.parrot.org/parrot/ticket/1553
'UnManagedStruct handling nested structure [eligible in 2.4]':
  eligible: 2.4
  note: 'UnManagedStruct will be simplified to only support flat structures. This means that elements which themselves have structure - struct pointers and function pointers will be stored as "void *" and "void (*)(void)" respectively. To use these, they will need to be cast to the appropriate signature on access.'
  tags:
    - pmcs
  ticket: https://trac.parrot.org/parrot/ticket/1551
'UnManagedStruct initializer structure [eligible in 2.4]':
  eligible: 2.4
  note: 'The initializer structure will cease to be an array of triples. Instead, an array of flags (no counts or offsets), or a string representation of the same information may be used.'
  tags:
    - pmcs
  ticket: https://trac.parrot.org/parrot/ticket/1552
'dlfunc and new_callback signature string format [eligible in 2.4]':
  eligible: 2.4
  note: These will be changed to allow more flexibility in types.
  tags:
    - opcodes
  ticket: https://trac.parrot.org/parrot/ticket/1565
'get_addr and set_addr [eligible in 1.5]':
  eligible: 1.5
  note: 'These opcodes are being repurposed. They will always return a unique memory address of the PMC. Uses of get_addr and set_addr that would set label values for Sub, Exception, and related PMC types will instead be handled by get_label and set_label.'
  tags:
    - opcodes
  ticket: https://trac.parrot.org/parrot/ticket/218
'loadlib_p_s_p [experimental]':
  note: Ability to use non-default dynamic loading behaviour.
  tags:
    - opcodes
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/1583
'logical PMC ops [eligible in 2.7]':
  eligible: 2.7
  note: These fall out from the logical vtables deprecation.
  tags:
    - opcodes
  ticket: https://trac.parrot.org/parrot/ticket/1655
'logical_* vtables [eligiblie in 2.7]':
  note: "These can be replaced by \"get_bool\" and intval ops unless you're using them for things that aren't really logical ops (don't do that!). Logical vtables are removed in r49012, and logical ops on PMCs are converted to use \"get_bool\" internally. Rakudo seems to depend on logical ops on PMCs."
  tags:
    - pmcs
  ticket: https://trac.parrot.org/parrot/ticket/1655
'mmd_cvt_to_types [eligible in 1.1]':
  eligible: 1.1
  tags:
    - functions
  ticket: https://trac.parrot.org/parrot/ticket/907
'multiple dispatch within core PMCs [eligible in 1.1]':
  eligible: 1.1
  tags:
    - pmcs
  ticket: https://trac.parrot.org/parrot/ticket/452
'new_callback_p_p_p_s [eligible in 2.4]':
  eligible: 2.4
  note: To be replaced with new_callback_p_p_p_p_s.
  tags:
    - opcodes
  ticket: https://trac.parrot.org/parrot/ticket/1548
'opcode numbering [experimental]':
  tags:
    - bytecode
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/451
'open and close opcodes will be removed [eligible in 2.7]':
  eligible: 2.7
  note: These opcodes will be removed. The open/close methods on File or the FileHandle PMC should be used instead.
  tags:
    - opcodes
  ticket: https://trac.parrot.org/parrot/ticket/1697
'packfile structure [experimental]':
  tags:
    - bytecode
    - experimental
  ticket: https://trac.parrot.org/parrot/ticket/451
'pkg-config support [eligible in 3.1]':
  eligible: 3.1
  note: Use "parrot_config" instead.
  tags:
    - Parrot library
  ticket: http://trac.parrot.org/parrot/ticket/1853
