# Copyright (C) 2001-2011, Parrot Foundation.

=head1 NAME

docs/hbdb.pod - The Honey Bee Debugger

=head1 SYNOPSIS

    hbdb [options] [file]    

=head1 DESCRIPTION

The Honey Bee Debugger (HBDB) is the standard debugger for the Parrot virtual
machine.

The purpose of a debugger is to allow programmer's to examine and modify what
is happening as their program executes from within an interactive environment.
This introduces some pretty convenient operations such as:

=over 4

=item *

Forcing a program to stop at a specific point or under certain conditions.

=item *

Inspecting variables and registers during a specific state.

=item *

Stepping through source code line by line.

=item *

Performing a backtrace to track a sequence of function calls.

=back

Already, it is easy to see just how valuable a debugger really is during
software development.

In its current state, HBDB is only capable of debugging programs written in
PIR. In the near future, any high level language using the Parrot Compiler
Tools (PCT) will be supported.

HBDB can be invoked with or without any arguments although the traditional
way is to at least specify the program to debug. Any of the following arguments
will not be treated as arguments for the debugger but instead for the debugee.

Any arguments following the program name will be given to the debugee, not the
debugger. As such, all HBDB switches must precede the program name.

    hbdb foobar.pir

    hbdb foobar.pir --baz --qux

    hbdb --ham foobar.pir --eggs --cheese

Note that if you do not specifiy a program on the command-line, you must load
it using the C<file> command (described below).

You will notice a lot of similarities with the GNU Project's GDB. This was done
intentionally to make users who traditionally use GDB feel right at home when
debugging with HBDB.

=head1 OPTIONS

HBDB uses both the classic UNIX and GNU style command-line switches. However,
there is one exception: switches I<can not> be grouped together. For instance,
if you wish to use both the C<-a> and C<-b> switches, you can not type C<-ab>.
In this case, only the first switch is applied and the second is ignored.

B<TODO> Can the debugee's arguments be grouped together?

=over 4

=item B<-h>, B<--help>

Displays help information.

=item B<-l>, B<--license>

Displays license information.

=back

=head1 COMMANDS

HBDB understands the following commands:

=over 4

=item B<t>

=item B<backtrace>

Displays a backtrace of the current continuation chain. Included in the output
is the current instruction and the PC value, file, and line number where each
function was called.

=item B<b>

=item B<break [I<pc>]>

Sets a breakpoint at the I<pc> value. This means that when the program counter
reaches I<pc>, execution will pause.

It it's current state, HBDB only supports breaking at PC values and not line
numbers. This feature is still in the works.

=item B<c>

=item B<continue>

Continues execution until the next breakpoint or watchpoint. This can only be
used once the debugee process has been started with the I<run> command.

=item B<d>

=item B<disassemble>

Disassembles the source file. Put differently, this translates Parrot bytecode
into Parrot assembly language (PASM).

In it's current state, the I<disassemble> command is very buggy. It is not
recommended for mainstream use just yet.

=item B<h>

=item B<help> [I<name>]

Displays a summary help message about the command I<name>. Without an argument,
it displays a short description of each command.

=item B<l>

=item B<list> [I<start>,I<end>] | [I<line>] | [I<function>]

Display lines from the source file being debugged. In the first form, it
lists the lines from I<start> through I<end>. Without any arguments, it lists
10 lines around the next line to be executed. There are several ways to specify
what part of the file to display.

Specifying I<start> and I<end> displays lines from I<start> to I<end>. Omitting
either I<start> or I<end> will display lines ending with I<end> and starting
with I<start> respectively.

Specifying I<line> displays 10 lines centered around I<line>.

Specifying I<function> displays 10 lines centered around the beginning of
I<function>.

=item B<q>

=item B<quit>

Exits HBDB. If you want to be different, you can also quit by sending the EOF
character (ASCII 04) which is usually ^D.

=item B<r>

=item B<run>

Starts program execution from the beginning of the file.

In the future, you will also be able to specify command-line arguments for the
debugee with this command.

=item B<s>

=item B<step>

Step to next line of code. Will step into a function as compared to I<next>
which will step over a function.

=back

You can find more information about the above commands by running HBDB and
typing C<help>.

=head1 EXAMPLES

In this section, we will run through a sample session of HBDB, looking at some
of the most frequently used commands.

B<TODO> Example output and commands

=head1 TRIVIA

Can you guess why it's called the I<Honey Bee> Debugger? "Honey Bee" is
actually a silly nickname the original author - Kevin Polulak - gave to one of
his cats, Sophie. She looks like this:

    \    /\  meow!
     )  ( ')
    (  /  )   _
     \(__)|  (_)_.-.
                   '-'

=head1 AUTHOR

Kevin Polulak (soh_cah_toa) <kpolulak@gmail.com>

=head1 SEE ALSO

F<frontend/hbdb/main.c>, F<src/hbdb.c>, F<src/embed/hbdb.c>, F<include/parrot/hbdb.h>

