# Copyright (C) 2001-2010, Parrot Foundation.

=head1 PDD 32: M0 Design Spec

=head2 Abstract

This document specifies M0, the set of microcode-like ops on which Parrot will
be based, and their requisite runtime environment.

=head2 Definitions

define things here (M0, mop/6model)

=over 4

=item * M0

C<M0> refers to the specification for a minimal virtual machine capable of
executing the ops described in this document.

=item * M0 ops

This is the lowest-level set of ops supported by an M0-compliant VM.  These ops
are a subset of the C<M0> specification.

=item * Lorito

Lorito refers to the combination of C<M0>, a meta-object model and the way that
they're used as a foundation for Parrot.

=item * Lorito Context

This refers to a Lorito Context PMC, which is the most important datastructure
at the M0 level. You could say that it is the "secret sauce" of M0. The exact
details of the Lorito Context PMC are still in flux.

=back

=head2 Design Goals

There are three goals that M0 needs to meet.  The first is that we have
executable code with equivalent power to C.  The second objective is to have a
form of code with can be easily analyzed.  The third goal is that we have a
single form of code used to implement the majority of Parrot, rather than
having having a mix of C and PIR.

We are also designing M0 to be minimally simple.  As much as possible, all the
complexity of Parrot will be built on top of M0.  This is to facilitate
multiple implementations, e.g. a quick and dirty prototype implementation in
JavaScript, a space-optimized implemention targeted for mobile devices, a
tracing jit targeted for server use, etc.

There will be no stacks in M0, not even for argument passing. Everything must
be in Continuation-Passing-Style.

=head2 Scope

This document only covers M0 and the minimum VM necessary to support it.
Anything beyond that, e.g. the meta-object model or layout of contexts, is
beyond its scope.

=head2 List of Ops

M0 ops are very low-level and provide the smallest necessary amount of
"syntax sugar" on top of the most basic operations of the VM.

The names and number of the ops below may change at any time, until the
spec is more stable.

=item * noop - Do Nothing

=item * get_cc - Get the current Lorito context

=item * invoke_cc - Invoke the current Lorito context

=item * new_ctx - Create a new Lorito context


=head2 Textual Representation

Describe what the textual form of M0 will look like.  The emphasis should be on
ease of consumption.  We won't be writing a large amount of M0 code by hand;
it's just fine if it's painful to do so for non-trivial use cases.

=head2 Binary Representation

Describe what the binary form of M0 will look like, including ops, constants
tables, debug segments, etc.  M0 being minimal, we should expect the binary
representation to remain stable once it's been finalized.

=head2 Binary instruction format

describe the binary encoding of a single M0 instruction and how it should be interpreteted.

=head2 metadata

describe metadata here, e.g. debugging information, aggregate op tracking info, whatever

=head2 Op Composition

if m0 needs to support op composition, describe it here

=head2 memory model

describe what kind of memory m0 ops will have access to and how they'll get at it

=head2 structs

describe structs here, as far as they're relevant to m0

=head2 Types

Describe the types here (INPS, S being an alias for P)

=head2 MOP interaction

describe this here - the mop is mostly a higher-level concern than M0 cares
about, but M0 will need to describe how PMCs and strings behave.  To make that
happen, M0 needs to have some minimal concept of a pmc (and an object, since
they'll be the same thing under Lorito).

=head2 FFI

describe FFI here.  This will become especially important when we start
integrating Lorito with the rest of Parrot and want to be able to call into C
code from M0 and vice versa.

=head2 Concurrency

describe what primitives will be needed to allow data sharing and
synchronization between contexts.

=cut

__END__
Local Variables:
  fill-column:78
End:
