/*
 * Copyright (C) 2010, Parrot Foundation.
 */

/*
** lorito.ops
*/

=head1 NAME

lorito.ops - Prototype Lortio M0 opcodes

=cut

=head1 DESCRIPTION

Lorito M0 opcodes

=cut

=head1 DOCUMENTATION

Proposed Lorito opcodes

https://github.com/atrodo/lorito/blob/master/ops.pod

Yet Another Lorito prototype

https://github.com/ekiru/yalp-asm

=cut

=head1 HISTORY

Initial version by Jonathan "Duke" Leto, as discussed at a meeting
between Duke, chromatic, Allison and cotto on 10. December 2010.

All opcodes will take 4 arguments, but there will be an implict 1st argument
of the current Context to each opcode, so in practice, only 3 arguments
are passed to opcodes. "Context is the new interp."


=cut

op context(out PMC) {
    PMC * ctx = CURRENT_CONTEXT(interp);
    $1 = ctx;
}

op noop() {
}

op call(invar PMC, invar PMC) :flo{
    PMC * ctx             = CURRENT_CONTEXT(interp);
    opcode_t   *dest      = expr NEXT();
    PMC * const p         = Parrot_pcc_get_continuation(interp,$1);
    PMC * const signature = Parrot_pcc_get_signature(interp,CURRENT_CONTEXT(interp));

    Parrot_pcc_set_pc_func(interp, ctx, dest);

    if (!PMC_IS_NULL(signature))
        Parrot_pcc_set_object(interp, signature, NULL);
    interp->current_cont   = $2;

    dest = VTABLE_invoke(interp, p, dest);
    goto ADDRESS(dest);
}



/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4 cinoptions='\:2=2' :
 */
