/*
 * Copyright (C) 2010-2011, Parrot Foundation.
 */

/*
** lorito.ops
*/

BEGIN_OPS_PREAMBLE

#include "m0proto_const.h"
#define M0_REG_COUNT          256
#define M0_ASSERT_REG(r)      PARROT_ASSERT(0 <= r && M0_REG_COUNT-1 >= r)
#define M0_ASSERT_REGS(a,b,c) {M0_ASSERT_REG(a);M0_ASSERT_REG(b);M0_ASSERT_REG(c);}

END_OPS_PREAMBLE

=head1 NAME

m0_proto.ops - Prototype M0 opcodes

=cut

=head1 DESCRIPTION

M0 opcodes

=head2

Cheats

=cut

op m0_new_ctx(out PMC) {
    INTVAL i;
    $1 = Parrot_pmc_new(interp, Parrot_pmc_get_type_str(interp,
                Parrot_str_new_constant(interp, "m0ctx")));
    VTABLE_set_integer_native(interp, $1, M0_REG_COUNT);
    for (i = 0; i < M0_REG_COUNT; i++) {
        VTABLE_set_number_keyed_int(interp, $1, i, 0.0);
    }
    /* TODO: initialize the variables table */
    /* TODO: initialize the metadata segment */
    /* TODO: initialize the bytecode segment (also, figure out how this is
     *       supposed to work for a dynop-based m0, if at all) */
}

op m0_cstr_var(invar PMC, in INT, in STR) {
    char *cstr;
    FLOATVAL f;

    /* Mmmmm.  Leaks. */
    cstr = Parrot_str_to_cstring(interp, $3);
    VTABLE_set_pointer_keyed_int(interp, $1, $2, cstr);
}

op m0_int_var(invar PMC, in INT, in INT) {
    VTABLE_set_integer_keyed_int(interp, $1, $2, $3);
}

op m0_num_var(invar PMC, in INT, in NUM) {
    VTABLE_set_number_keyed_int(interp, $1, $2, $3);
}

=head2 M0 Math/Numeric ops

=cut

op m0_add_i(invar PMC, in INT, in INT, in INT) {
    INTVAL i1, i2;

    M0_ASSERT_REGS($2, $3, $4);
    i1 = VTABLE_get_integer_keyed_int(interp, $1, $3);
    i2 = VTABLE_get_integer_keyed_int(interp, $1, $4);
    VTABLE_set_integer_keyed_int(interp, $1, $2, i1 + i2);
}

op m0_add_n(invar PMC, in INT, in INT, in INT) {
    FLOATVAL f1, f2;

    M0_ASSERT_REGS($2, $3, $4);
    f1 = VTABLE_get_number_keyed_int(interp, $1, $3);
    f2 = VTABLE_get_number_keyed_int(interp, $1, $4);
    VTABLE_set_number_keyed_int(interp, $1, $2, f1 + f2);
}

=head2 Temporary ops

=cut

op m0_print_i(invar PMC, in INT, in INT, in INT) {
    M0_ASSERT_REGS($2, $3, $4);
    Parrot_printf(interp, "%d", VTABLE_get_integer_keyed_int(interp, $1, $2));
}

op m0_print_n(invar PMC, in INT, in INT, in INT) {
    M0_ASSERT_REGS($2, $3, $4);
    Parrot_printf(interp, "%g", VTABLE_get_number_keyed_int(interp, $1, $2));
}

op m0_print_s(invar PMC, in INT, in INT, in INT) {
    M0_ASSERT_REGS($2, $3, $4);
    Parrot_printf(interp, "%s", 
            (char*)VTABLE_get_pointer_keyed_int(interp, $1, $2));
}



/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4 cinoptions='\:2=2' :
 */
