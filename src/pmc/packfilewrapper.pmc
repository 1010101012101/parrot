/*
Copyright (C) 2001-2011, Parrot Foundation.

=head1 NAME

src/pmc/packfilewrapper.pmc - PackfileWrapper PMC

=head1 DESCRIPTION

This class implements a user-accessible wrapper for the PackFile* structure
used internally by Parrot. It is essentially an interface for the user to call
Packfile subsystem API calls, and work with the PackFile* structures output
from utilities which generate them.

=head2 Methods

=over 4

=cut

*/

pmclass PackfileWrapper auto_attrs {
    ATTR PackFile * pf;

    VTABLE void init() {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        attrs->pf = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

    VTABLE void destroy() {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        if (attrs->pf != NULL)
            Parrot_pf_destroy(INTERP, attrs->pf);
    }

    VTABLE void set_pointer(void * ptr) {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        attrs->pf = (PackFile*)ptr;
    }

    VTABLE void *get_pointer() {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        return attrs->pf;
    }

    VTABLE INTVAL get_bool() {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        return (attrs->pf != NULL);
    }

    VTABLE void mark() {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        if (attrs->pf != null)
            Parrot_pf_mark_packfile(INTERP, attrs->pf);
    }

    METHOD main_sub() {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        if (attrs->pf == NULL)
            RETURN (PMC *PMCNULL);
        else {
            PMC * const main_sub = Parrot_pf_get_packfile_main_sub(INTERP, SELF)
            RETURN (PMC *main_sub);
        }
    }

    METHOD trigger_init() {
        Parrot_pf_prepare_packfile_init(INTERP, SELF);
    }

    METHOD trigger_load() {
        Parrot_pf_prepare_packfile_load(INTERP, SELF);
    }

    METHOD execute(PMC * mainargs) {
        Parrot_pf_execute_bytecode_program(INTERP, SELF, mainargs);
    }

    METHOD serialize() {
        Parrot_PackfileWrapper_Attributes * const attrs =
                PARROT_PACKFILEWRAPPER(SELF);
        if (attrs->pf == NULL)
            RETURN (STRING *STRINGNULL);
        STRING * const str = Parrot_pf_serialize_to_string(INTERP, attrs->pf);
        RETURN (STRING *str);
    }
}
