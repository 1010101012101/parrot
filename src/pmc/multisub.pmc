/*
Copyright (C) 2001-2009, Parrot Foundation.

=head1 NAME

src/pmc/multisub.pmc - A container for multi-dispatched subs

=head1 DESCRIPTION

This class inherits from ResizablePMCArray and provides an Array of
Sub PMCs with the same short name, but different long names.

=head2 Functions

=over 4

=cut

*/

#include "pmc/pmc_callcontext.h"

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* HEADERIZER END: static */

pmclass MultiSub extends ResizablePMCArray auto_attrs provides array provides invokable {

    VTABLE STRING * get_string() {
        PMC * const sub0    = VTABLE_get_pmc_keyed_int(INTERP, SELF, 0);
        STRING * const name = VTABLE_get_string(INTERP, sub0);
        return name;
    }

    VTABLE void push_pmc(PMC *value) {
        if (!VTABLE_does(INTERP, value, CONST_STRING(INTERP, "invokable")))
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                EXCEPTION_INVALID_OPERATION, "attempt to push non Sub PMC");

        SUPER(value);
    }

    VTABLE void set_pmc_keyed_int(INTVAL key, PMC *value) {
        STRING * const _sub = CONST_STRING(INTERP, "Sub");
        if (!VTABLE_isa(INTERP, value, _sub))
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
                    "attempt to set non Sub PMC");
        SUPER(key, value);
    }

    VTABLE opcode_t *invoke(void *next) {
        PMC * const sig_obj = CONTEXT(INTERP)->current_sig;
        PMC * const func    = Parrot_mmd_sort_manhattan_by_sig_pmc(INTERP,
                SELF, sig_obj);

        if (PMC_IS_NULL(func))
            Parrot_ex_throw_from_c_args(INTERP, NULL, 1,
                    "No applicable candidates found to dispatch to for '%Ss'",
                    VTABLE_get_string(INTERP, SELF));
        return VTABLE_invoke(INTERP, func, next);
    }
}

/*

=back

=head1 SEE ALSO

F<src/multidispatch.c>,

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4 cinoptions='\:2=2' :
 */
