/*
Copyright (C) 2008-2011, Parrot Foundation.

=head1 NAME

src/pmc/sockaddr.pmc - sockaddr_in/sockaddr_in6 holder

=head1 DESCRIPTION

The Sockaddr PMC holds a C<sockaddr_in> (IPv4) or C<sockaddr_in6> (IPv6) and
saves its length (to distinguish C<sockaddr_in> and C<sockaddr_in6>).


=head2 Vtable Functions

These are the vtable functions for the Sockaddr class.

=over 4

=cut

*/

#ifdef __cplusplus
extern "C" {
#endif
    struct sockaddr_storage;
#ifdef __cplusplus
}
#endif

/* TODO: move all platform specific code to src/platform */
#ifdef _WIN32
#  include <ws2tcpip.h>
#  undef CONST
#else
#  include <sys/socket.h>
#endif

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* HEADERIZER END: static */

pmclass Sockaddr auto_attrs {
    ATTR INTVAL  type;
    ATTR INTVAL  protocol;
    ATTR INTVAL  len;     /* Length of the sockaddr struct */
    ATTR void   *pointer; /* Pointer to a sockaddr struct */

/*

=item C<void init()>

Initializes the PMC by allocating a C<sockaddr_storage>.

=cut

*/

    VTABLE void init() {
        Parrot_Sockaddr_attributes * const attrs =
            (Parrot_Sockaddr_attributes *) PMC_data(SELF);

        attrs->type     = 0;
        attrs->protocol = 0;
        attrs->pointer  = NULL;
        attrs->len      = 0;

        PObj_custom_destroy_SET(SELF);
    }

/*

=item C<void destroy()>

Destroys the PMC and frees all allocated memory.

=cut

*/

    VTABLE void destroy() {
        Parrot_Sockaddr_attributes * const data = PARROT_SOCKADDR(SELF);

        if (data) {
            if (data->pointer)
                mem_gc_free(INTERP, data->pointer);
            data->pointer = NULL;
        }
    }

/*

=item C<PMC *clone()>

Creates a new Sockaddr PMC with the same contents and length as the current
one.

=cut

*/

    VTABLE PMC *clone() {
        PMC * const dest = Parrot_pmc_new(INTERP, SELF->vtable->base_type);
        Parrot_Sockaddr_attributes * const old_attrs = PARROT_SOCKADDR(SELF);
        Parrot_Sockaddr_attributes * const new_attrs = PARROT_SOCKADDR(dest);

        new_attrs->type     = old_attrs->type;
        new_attrs->protocol = old_attrs->protocol;
        new_attrs->len      = old_attrs->len;

        if (old_attrs->len) {
            new_attrs->pointer = Parrot_gc_allocate_memory_chunk(INTERP,
                                    old_attrs->len);
            memcpy(new_attrs->pointer, old_attrs->pointer, old_attrs->len);
        }

        return dest;
    }

/*

=item C<INTVAL get_bool()>

Returns true if the Sockaddr is defined.

=cut

*/

    VTABLE INTVAL get_bool() {
        Parrot_Sockaddr_attributes * const data = PARROT_SOCKADDR(SELF);

        return data->pointer ? 1 : 0;
    }

/*

=item C<INTVAL get_integer()>

Returns the length of the sockaddr struct.

=cut

*/

    VTABLE INTVAL get_integer() {
        INTVAL len;

        GET_ATTR_len(INTERP, SELF, len);

        return len;
    }

/*

=item C<void *get_pointer()>

Returns a pointer to the C<sockaddr_in> or C<sockaddr_in6>.

=cut

*/

    VTABLE void *get_pointer() {
        Parrot_Sockaddr_attributes * const data = PARROT_SOCKADDR(SELF);
        return data->pointer;
    }

/*

=item C<STRING *get_string()>

Returns the string representation of this sockaddr by calling C<getnameinfo(3)>.

=cut

*/
    VTABLE STRING *get_string() {
        Parrot_Sockaddr_attributes * const data = PARROT_SOCKADDR(SELF);

        if (!data->pointer)
            return Parrot_sprintf_c(interp, "(?)");

        return Parrot_io_getnameinfo(INTERP, data->pointer, data->len);
    }


/*

=item C<void set_pointer(void *)>

Copies a C<sockaddr_in> or C<sockaddr_in6> from the given C<addrinfo> pointer
(by accessing its C<ai_addr> and C<ai_addrlen> members).

=cut

*/

    VTABLE void set_pointer(void *value) {
        Parrot_Sockaddr_attributes * const data = PARROT_SOCKADDR(SELF);
        struct addrinfo *ai = (struct addrinfo *)value;

        data->type     = ai->ai_socktype;
        data->protocol = ai->ai_protocol;
        data->len      = ai->ai_addrlen;
        data->pointer  = Parrot_gc_allocate_memory_chunk(INTERP,
                            ai->ai_addrlen);

        memcpy(data->pointer, ai->ai_addr, ai->ai_addrlen);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4 cinoptions='\:2=2' :
 */

