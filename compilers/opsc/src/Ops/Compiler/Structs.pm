#! nqp
# Copyright (C) 2011, Parrot Foundation.

# Handcrafted definitions of structs used.
# TODO: Generate this file from original headers

# Each definition is hash of field to index.

module Ops::Compiler;

our %STRUCT;

INIT {
    %STRUCT<struct.parrot_interp_t> := hash(
        ctx                     => 0,
        gc_sys                  => 1,
        gc_registry             => 2,
        class_hash              => 3,
        vtables                 => 4,
        n_vtable_max            => 5,
        n_vtable_alloced        => 6,
        piodata                 => 7,
        evc_func_table          => 8,
        evc_func_table_size     => 9,
        n_libs                  => 10,
        all_op_libs             => 11,
        flags                   => 12,
        debug_flags             => 13,

        run_core                => 14,
        cores                   => 15,
        num_cores               => 16,

        resume_flag             => 17,
        resume_offset           => 18,

        code                    => 19,
        current_pf              => 20,

        op_hash                 => 21,

        pdb                     => 22,
        lo_var_ptr              => 23,
        parent_interpreter      => 24,
        world_inited            => 25,
        hash_seed               => 26,
        iglobals                => 27,

        HLL_info                => 28,
        HLL_namespace           => 29,

        root_namespace          => 30,
        scheduler               => 31,

        op_mmd_cache            => 32,

        caches                  => 33,

        const_cstring_table     => 34,
        const_cstring_hash      => 35,

        task_queue              => 36,
        exit_handler_list       => 37,
        sleeping                => 38,

        current_runloop         => 39,
        runloop_jmp_free_list   => 40,

        current_runloop_level   => 41,
        current_runloop_id      => 42,

        thread_data             => 43,

        recursion_limit         => 44,

        current_cont            => 45,
        api_jmp_buf             => 46,
        final_exception         => 47,
        exit_code               => 48,
    );


    %STRUCT<struct.PMC> := hash(
        flags       => 0,
        vtable      => 1,
        data        => 2,
        _metadata   => 3,
    );


    %STRUCT<struct.VTABLE> := hash(
        _namespace              => 0,
        base_type               => 1,
        whoami                  => 2,
        flags                   => 3,
        provides_str            => 4,
        isa_hash                => 5,
        pmc_class               => 6,
        mro                     => 7,
        attribute_defs          => 8,
        ro_variant_vtable       => 9,

        absolute => 10,
        add => 11,
        add_attribute => 12,
        add_float => 13,
        add_int => 14,
        add_method => 15,
        add_parent => 16,
        add_role => 17,
        add_vtable_override => 18,
        assign_pmc => 19,
        assign_string_native => 20,
        can => 21,
        clone => 22,
        clone_pmc => 23,
        cmp => 24,
        cmp_num => 25,
        cmp_pmc => 26,
        cmp_string => 27,
        concatenate => 28,
        concatenate_str => 29,
        decrement => 30,
        defined => 31,
        defined_keyed => 32,
        defined_keyed_int => 33,
        defined_keyed_str => 34,
        delete_keyed => 35,
        delete_keyed_int => 36,
        delete_keyed_str => 37,
        delprop => 38,
        destroy => 39,
        divide => 40,
        divide_float => 41,
        divide_int => 42,
        does => 43,
        does_pmc => 44,
        elements => 45,
        exists_keyed => 46,
        exists_keyed_int => 47,
        exists_keyed_str => 48,
        find_method => 49,
        floor_divide => 50,
        floor_divide_float => 51,
        floor_divide_int => 52,
        freeze => 53,
        get_attr_keyed => 54,
        get_attr_str => 55,
        get_bool => 56,
        get_class => 57,
        get_integer => 58,
        get_integer_keyed => 59,
        get_integer_keyed_int => 60,
        get_integer_keyed_str => 61,
        get_iter => 62,
        get_namespace => 63,
        get_number => 64,
        get_number_keyed => 65,
        get_number_keyed_int => 66,
        get_number_keyed_str => 67,
        get_pmc => 68,
        get_pmc_keyed => 69,
        get_pmc_keyed_int => 70,
        get_pmc_keyed_str => 71,
        get_pointer => 72,
        get_pointer_keyed => 73,
        get_pointer_keyed_int => 74,
        get_pointer_keyed_str => 75,
        get_repr => 76,
        get_string => 77,
        get_string_keyed => 78,
        get_string_keyed_int => 79,
        get_string_keyed_str => 80,
        getprop => 81,
        getprops => 82,
        hashvalue => 83,
        i_absolute => 84,
        i_add => 85,
        i_add_float => 86,
        i_add_int => 87,
        i_concatenate => 88,
        i_concatenate_str => 89,
        i_divide => 90,
        i_divide_float => 91,
        i_divide_int => 92,
        i_floor_divide => 93,
        i_floor_divide_float => 94,
        i_floor_divide_int => 95,
        i_modulus => 96,
        i_modulus_float => 97,
        i_modulus_int => 98,
        i_multiply => 99,
        i_multiply_float => 100,
        i_multiply_int => 101,
        i_neg => 102,
        i_repeat => 103,
        i_repeat_int => 104,
        i_subtract => 105,
        i_subtract_float => 106,
        i_subtract_int => 107,
        increment => 108,
        init => 109,
        init_int => 110,
        init_pmc => 111,
        inspect => 112,
        inspect_str => 113,
        instantiate => 114,
        invoke => 115,
        is_equal => 116,
        is_equal_num => 117,
        is_equal_string => 118,
        is_same => 119,
        isa => 120,
        isa_pmc => 121,
        mark => 122,
        modulus => 123,
        modulus_float => 124,
        modulus_int => 125,
        morph => 126,
        multiply => 127,
        multiply_float => 128,
        multiply_int => 129,
        name => 130,
        neg => 131,
        pop_float => 132,
        pop_integer => 133,
        pop_pmc => 134,
        pop_string => 135,
        push_float => 136,
        push_integer => 137,
        push_pmc => 138,
        push_string => 139,
        remove_attribute => 140,
        remove_method => 141,
        remove_parent => 142,
        remove_role => 143,
        remove_vtable_override => 144,
        repeat => 145,
        repeat_int => 146,
        set_attr_keyed => 147,
        set_attr_str => 148,
        set_bool => 149,
        set_integer_keyed => 150,
        set_integer_keyed_int => 151,
        set_integer_keyed_str => 152,
        set_integer_native => 153,
        set_number_keyed => 154,
        set_number_keyed_int => 155,
        set_number_keyed_str => 156,
        set_number_native => 157,
        set_pmc => 158,
        set_pmc_keyed => 159,
        set_pmc_keyed_int => 160,
        set_pmc_keyed_str => 161,
        set_pointer => 162,
        set_pointer_keyed => 163,
        set_pointer_keyed_int => 164,
        set_pointer_keyed_str => 165,
        set_string_keyed => 166,
        set_string_keyed_int => 167,
        set_string_keyed_str => 168,
        set_string_native => 169,
        setprop => 170,
        share => 171,
        share_ro => 172,
        shift_float => 173,
        shift_integer => 174,
        shift_pmc => 175,
        shift_string => 176,
        splice => 177,
        substr => 178,
        substr_str => 179,
        subtract => 180,
        subtract_float => 181,
        subtract_int => 182,
        thaw => 183,
        thawfinish => 184,
        type => 185,
        unshift_float => 186,
        unshift_integer => 187,
        unshift_pmc => 188,
        unshift_string => 189,
        visit => 190,
        attr_size => 191,
    );
};

# Local Variables:
#   mode: perl6
#   fill-column: 100
# End:
# vim: expandtab ft=perl6 shiftwidth=4:
