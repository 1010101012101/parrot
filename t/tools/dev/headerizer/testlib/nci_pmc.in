/*
Copyright (C) 2001-2011, Parrot Foundation.


=head1 NAME

src/pmc/nci.pmc - Native Call Interface

=head1 DESCRIPTION

The vtable functions for the native C call functions.

=head2 Methods

=over 4

=cut

*/

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */

static void pcc_params(PARROT_INTERP,
    ARGIN(STRING *sig),
    ARGMOD(Parrot_NCI_attributes *nci_info),
    size_t sig_length)
        __attribute__nonnull__(1)
        __attribute__nonnull__(2)
        __attribute__nonnull__(3)
        FUNC_MODIFIES(*nci_info);

#define ASSERT_ARGS_pcc_params __attribute__unused__ int _ASSERT_ARGS_CHECK = (\
       PARROT_ASSERT_ARG(interp) \
    , PARROT_ASSERT_ARG(sig) \
    , PARROT_ASSERT_ARG(nci_info))
/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */
/* HEADERIZER END: static */

/*

=item C<static void pcc_params(PARROT_INTERP, STRING *sig, Parrot_NCI_attributes
*nci_info, size_t sig_length)>

Check and validate parameter signatures

=cut

*/

static void
pcc_params(PARROT_INTERP, ARGIN(STRING *sig), ARGMOD(Parrot_NCI_attributes *nci_info),
                size_t sig_length)
{
    ASSERT_ARGS(pcc_params)

    /* NCI and PCC have a 1 to 1 mapping except an
       extra char in PCC for invocant and slurpy */
    size_t       buf_length = sig_length + 2 + 1;

    /* avoid malloc churn on common signatures */
    char         static_buf[16];
    char * const sig_buf = sig_length <= sizeof static_buf ?
                            static_buf :
                            (char *)mem_sys_allocate(buf_length);

    size_t j = 0;
    size_t i;

    for (i = 0; i < sig_length; ++i) {
        const INTVAL c = STRING_ord(interp, sig, i);

        PARROT_ASSERT(j < buf_length - 1);

        switch (c) {
          case (INTVAL)'0':    /* null ptr or such - doesn't consume a reg */
            break;
          case (INTVAL)'f':
          case (INTVAL)'N':
          case (INTVAL)'d':
            sig_buf[j++] = 'N';
            break;
          case (INTVAL)'I':   /* INTVAL */
          case (INTVAL)'l':   /* long */
          case (INTVAL)'i':   /* int */
          case (INTVAL)'s':   /* short */
          case (INTVAL)'c':   /* char */
            sig_buf[j++] = 'I';
            break;
          case (INTVAL)'S':
          case (INTVAL)'t':   /* string, pass a cstring */
            sig_buf[j++] = 'S';
            break;
          case (INTVAL)'J':   /* interpreter */
            break;
          case (INTVAL)'p':   /* push pmc->data */
          case (INTVAL)'P':   /* push PMC * */
          case (INTVAL)'V':   /* push PMC * */
          case (INTVAL)'2':
          case (INTVAL)'3':
          case (INTVAL)'4':
            sig_buf[j++] = 'P';
            break;
          case (INTVAL)'v':
            /* null return */
            if (j == 0)
                sig_buf[j++] = '\0';
            break;
          case (INTVAL)'O':   /* push PMC * invocant */
            sig_buf[j++] = 'P';
            sig_buf[j++] = 'i';
            break;
          case (INTVAL)'@':   /* push PMC * slurpy */
            sig_buf[j++] = 'P';
            sig_buf[j++] = 's';
            break;
          case (INTVAL)'b': /* buffer (void*) pass Buffer_bufstart(SReg) */
          case (INTVAL)'B': /* buffer (void**) pass &Buffer_bufstart(SReg) */
            sig_buf[j++] = 'S';
            break;
          default:
            Parrot_ex_throw_from_c_args(interp, NULL,
                    EXCEPTION_JIT_ERROR,
                    "Unknown param Signature %c\n", (char)c);
            break;
        }
    }

    PARROT_ASSERT(j < buf_length);
    sig_buf[j++] = '\0';


    nci_info->pcc_return_signature =
        Parrot_str_new(interp, sig_buf, 1);

    nci_info->pcc_params_signature = j > 1 ?
        Parrot_str_new(interp, sig_buf + 1, j - 1) :
        CONST_STRING(interp, "");

    if (sig_buf != static_buf)
        mem_sys_free(sig_buf);
}

/*

pmclass NCI auto_attrs provides invokable {
}

/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd03_calling_conventions.pod>.

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
